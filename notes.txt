-----------React Multi-Language App -with !18next--------------------
https://www.i18next.com/overview/getting-started  - instuction how to use !18next
1. npx create-react-app projectName;
2. npx create-react-app projectName --template clean-cra //creates the simple react-app without extra files that we don't use for templates.
3. npm install i18next --save or  npm install react-i18next i18next --save //'react-i18next'- it' a react implementation of i18next for production.
4. inside the index.js add below codes.
-------start--------
 import React from "react";
import ReactDOM from "react-dom";
import i18n from "i18next";
import { useTranslation, initReactI18next } from "react-i18next";
import "./index.css";
// import App from "./App";

i18n
  .use(initReactI18next) // passes i18n down to react-i18next
  .init({
    // the translations
    // (tip move them in a JSON file and import them,
    // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)
    resources: {
      en: {
        translation: {
          "Welcome to React": "Welcome to React",
        },
      },
      ru: {
        translation: {
          "Welcome to React": "Добро пожаловать в React",
        },
      },
      kz: {
        translation: {
          "Welcome to React": "Қош келдіңіз React-қа",
        },
      },
    },
    lng: document.querySelector("html").lang, // if you're using a language detector, do not define the 'lng' option
    fallbackLng: "en",
  });

function App() {
  const { t } = useTranslation();

  return <h2>{t("Welcome to React")}</h2>;
}

// append app to dom
ReactDOM.render(<App />, document.getElementById("root"));
-------end--------

when you run 'npm start' you see the 'Welcome page on the browser, to change the language,you can test changing the language  manually,  change the value for the lang attribute '<html lang="ru">' in the index.html page. Which works thanks to this line of code " lng: document.querySelector("html").lang ", but when you use a language detector utility don't define the 'lng' attribute(or property).

4. https://github.com/i18next/i18next-browser-languageDetector // to get instruction for the language detector
5. npm install i18next-browser-languagedetector   - install the package
6. import LanguageDetector from 'i18next-browser-languagedetector';  // put at the top the index.js.
7..use(initReactI18next) // passes i18n down to react-i18next
  .use(LanguageDetector)  //add it here below the .use(initReactI18next);

  
8. We can configure  the language detector by passing an object inside of this init() options.
inside the init() below the 'fallbackLng:' add the 'detection' object and inside here pass 
 "order: ['querystring', 'cookie', 'localStorage', 'sessionStorage', 'navigator', 'htmlTag', 'path', 'subdomain']"  - where the order which tells the utility which setting to prioritize, you could have multiple or you could prioritize the 'COOKIE' beacuse that's is the user setting, and if you can't find the language inside the cookie you actually revert to whatever comes next. // like: 
  detection: {
      order: ["cookie", "htmlTag", "localStorage", "path", "subdomain"], //we change the order for this project, added only those what we will use here.
    }
9. remove the 
    lng: document.querySelector("html").lang, from the init() we don't use it any more, since using a Langauge Detector utility 

    Now you can check the app it's working

    -----------chaches--------
10. inside the detection object we can say caches and pass different places where we want this language setting to be cached in for our user. We jsut gonna pass 'cookie'as a key here for now.
    detection: {
      order: ["htmlTag", "cookie", "localStorage", "path", "subdomain"],
      caches: ["cookie"],
    },
Now, if you go the devtools -> Application -> Local Storage (http:localhost:300) you'll see Key/Value and then go to the 'Cookies'(http:localhost:300) you'll find the Name/Value properties, and when you change the '<html lang="ru">' that cookie changes to whatever you defined as value.


---------------i18next http backend package----------
The utility i18next http backend allows us to load different languages files from any source that we wanted to load it from. 
https://github.com/i18next/i18next-http-backend - instruction

11. npm install i18next-http-backend  // install command
12. outsource the translation data into files and then load them once the app is loaded.
13. exctact translation object into its own
create inside the 'public' folder assets/locales/en/translation.json file, and put the value of the 'translation' object
      en: {
        translation: {
          "Welcome to React": "Welcome to React", // this object cut out from here and put inside the translation.json file, and change it for json format.
        },
      },
translation.json file should look like this.
{
  "welcome_to_react": "Welcome to React"
}
14. We can copy this and add another file inside the locales folder and call it 'ru' fro the russion translation  and pass as its value the russian text, as 
{
  "welcome_to_react": "Добро пожаловать в React"
}
15. same action for any language option in your project then, remove the  resources key and its value from the init() inside the index.js file

16. import HttpApi from 'i18next-http-backend'; // import it into index.js 
17. Add another chain like :
  .use(initReactI18next)
  .use(LanguageDetector)
  .use(HttpApi)

18. Configure it inside the init() add  'backend' property(or key) as its value pass an object 'loadPath, which tells where to find the translation files, in this project we passing the relative path because we're serving the files from within the same project. And you can also load these from your backend api or from anywhere.
after the detection object pass this  --> 
    backend: {
      loadPath: "/assets/locales/{{lng}}/translation.json",
    },
 19. after the backend object add 
     react: {
      useSuspense: false,
    }, 

20. indie the App funtion inside the index.js change the key inside the return, since we changed it inside the json file, where all data comes from., like -> 
return <h2>{t("welcome_to_react")}</h2>;    

Now can check if the app works same as before, and you can manually change the 'cookie' value by changing the 'Value' property for the lang changes. It works this way too because it's fetching the cookie  first before the htmlTag, and it's actually ignoring the htmlTag because this is more priority. 
Now if you look at 'Network' tab of the devtool, you see that it's loading the translation.json 